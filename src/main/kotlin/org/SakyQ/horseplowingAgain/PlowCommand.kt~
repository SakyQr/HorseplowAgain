// Command Class (Fixed)
package org.SakyQ.horseplowingAgain

import org.bukkit.command.Command
import org.bukkit.command.CommandExecutor
import org.bukkit.command.CommandSender
import org.bukkit.command.TabCompleter
import org.bukkit.entity.Player

class PlowCommand(private val plugin: HorseplowingAgain) : CommandExecutor, TabCompleter {

    override fun onCommand(sender: CommandSender, command: Command, label: String, args: Array<out String>): Boolean {
        if (args.isEmpty()) {
            sender.sendMessage(plugin.getMessageManager().getMessage("command.help"))
            return true
        }

        when (args[0].lowercase()) {
            "reload" -> {
                if (!sender.hasPermission("horseplow.admin")) {
                    sender.sendMessage(plugin.getMessageManager().getMessage("error.no_permission"))
                    return true
                }

                plugin.getConfigManager().reload()
                plugin.getMessageManager().reload()
                sender.sendMessage(plugin.getMessageManager().getMessage("command.reload"))
                return true
            }
            "give" -> {
                if (!sender.hasPermission("horseplow.give")) {
                    sender.sendMessage(plugin.getMessageManager().getMessage("error.no_permission"))
                    return true
                }

                if (sender !is Player) {
                    sender.sendMessage("This command can only be used by players.")
                    return true
                }

                sender.inventory.addItem(ItemManager.createPlowItem())
                sender.sendMessage("Â§aYou've been given a Horse Plow!")
                return true
            }
            else -> {
                sender.sendMessage(plugin.getMessageManager().getMessage("command.help"))
                return true
            }
        }
    }

    override fun onTabComplete(sender: CommandSender, command: Command, alias: String, args: Array<out String>): List<String> {
        if (args.size == 1) {
            val completions = mutableListOf<String>()
            val subCommands = listOf("reload", "give")

            for (subCommand in subCommands) {
                if (subCommand.startsWith(args[0].lowercase())) {
                    completions.add(subCommand)
                }
            }

            return completions
        }

        return emptyList()
    }
}