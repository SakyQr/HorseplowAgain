package org.SakyQ.horseplowingAgain

import org.bukkit.NamespacedKey
import org.bukkit.entity.Minecart
import org.bukkit.event.EventHandler
import org.bukkit.event.Listener
import org.bukkit.event.vehicle.VehicleDamageEvent
import org.bukkit.event.vehicle.VehicleDestroyEvent
import org.bukkit.persistence.PersistentDataType

class MinecartListener(private val plugin: HorseplowingAgain) : Listener {

    private val plowTag = NamespacedKey(plugin, "isPlow")

    @EventHandler
    fun onMinecartDamage(event: VehicleDamageEvent) {
        val vehicle = event.vehicle

        if (vehicle !is Minecart) {
            return
        }

        // Check if this is a plow minecart
        if (vehicle.persistentDataContainer.has(plowTag, PersistentDataType.BYTE)) {
            // Cancel damage if configured to protect plow minecarts
            if (!plugin.getConfigManager().allowMinecartDamage()) {
                event.isCancelled = true
            }
        }
    }

    @EventHandler
    fun onMinecartDestroy(event: VehicleDestroyEvent) {
        val vehicle = event.vehicle

        if (vehicle !is Minecart) {
            return
        }

        // Check if this is a plow minecart
        if (vehicle.persistentDataContainer.has(plowTag, PersistentDataType.BYTE)) {
            // Find and update the associated horse
            for ((horseId, minecartId) in plugin.getPlowHorses()) {
                if (minecartId == vehicle.uniqueId) {
                    plugin.getPlowHorses().remove(horseId)

                    // Get the horse entity and remove its plow tag
                    val horse = plugin.server.getEntity(horseId)
                    if (horse != null) {
                        val key = NamespacedKey(plugin, "isPlow")
                        horse.persistentDataContainer.remove(key)
                    }
                    break
                }
            }
        }
    }
}
